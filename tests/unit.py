from PyDexter import PyDexter

def strip_space(str):
	return ''.join(str.split())

def test_hist():
	''' indirectly compares actual to expected js generated by PyDexter hist method '''
	test_input = [1,2,3,4,5]
	chart_type = 'hist'
	EXPECTED_JS = strip_space("new D3xter({}).hist([1, 2, 3, 4, 5]); \n")
	actual_js = strip_space(PyDexter()._make_js(chart_type,test_input))
	assert actual_js == EXPECTED_JS
	
def test_scatter_with_snd_arg():
	chart_type = 'plot'
	test_input_x1 = [0,1]
	test_input_x2 = [0,1]
	test_config = {'datasets': [{'y': [0, 1], 'x': [0, 1]}]}
	actual_js = PyDexter()._make_js(chart_type,test_config)
	EXPECTED_JS = "new D3xter({}).plot({'datasets': [{'y': [0, 1], 'x': [0, 1]}]}); \n"
	assert actual_js == EXPECTED_JS

def test_scatter_without_snd_arg():
	chart_type = 'plot'
	test_input_x1 = [0,1]
	test_input_x2 = None
	test_config = {'datasets': [{'y': [0, 1], 'x': [0 ,1]}]}
	actual_js = PyDexter()._make_js(chart_type,test_config)
	EXPECTED_JS = "new D3xter({}).plot({'datasets': [{'y': [0, 1], 'x': [0, 1]}]}); \n"
	assert actual_js == EXPECTED_JS

def test_plot():
	''' compares actual to expected js generated by PyDexter plot method '''
	test_input = [1,2,3,4,5]
	chart_type = 'plot'
	EXPECTED_JS = "new D3xter({}).plot([1, 2, 3, 4, 5]); \n"
	actual_js = PyDexter()._make_js(chart_type,test_input)
	assert actual_js == EXPECTED_JS

def test_pie():
	''' compares actual to expected js generated by PyDexter pie method '''
	test_input = [1,2,3,4,5]
	chart_type = 'pie'
	EXPECTED_JS = "new D3xter({}).pie([1, 2, 3, 4, 5]); \n"
	actual_js = PyDexter()._make_js(chart_type,test_input)
	assert actual_js == EXPECTED_JS

def test_timeline():
	''' compares actual to expected js generated by PyDexter timeline method '''
	test_input = [1,2,3,4,5]
	chart_type = 'timeline'
	EXPECTED_JS = "new D3xter({}).timeline([1, 2, 3, 4, 5]); \n"
	actual_js = PyDexter()._make_js(chart_type,test_input)
	assert actual_js == EXPECTED_JS

def test_bar():
	''' compares actual to expected js generated by PyDexter bar method '''
	test_input = [1,2,3,4,5]
	chart_type = 'bar'
	EXPECTED_JS = "new D3xter({}).bar([1, 2, 3, 4, 5]); \n"
	actual_js = PyDexter()._make_js(chart_type,test_input)
	assert actual_js == EXPECTED_JS
